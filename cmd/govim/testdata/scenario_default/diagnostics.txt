# Test that we receive the expected number of diagnostics from gopls.
#
# We can't be sure of the order in which diagnostics will be received, hence the first two waits
# both look from the start.

vim ex 'e main1.go'
errlogmatch -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main1.go
errlogmatch -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main2.go
vim ex 'call cursor(1,1)'
vim ex 'call feedkeys(\"O\", \"xt\")'
errlogmatch 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main1.go
vim ex 'call feedkeys(\"i// Hello\", \"xt\")'
errlogmatch 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main1.go
vim ex 'w'
cmp main1.go main1.go.res
errlogmatch 'gopls\.CodeAction\(\) return'
errlogmatch -count 3 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main1.go
errlogmatch -count 1 -start 'PublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\n\S+:\s+URI:\s+"file://'$WORK/main2.go

-- go.mod --
module mod.com
-- main1.go --
package main
-- main2.go --
package main
-- main1.go.res --
// Hello
package main
